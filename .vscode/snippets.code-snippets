{
	// Place your pysimgame workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Manager Component Class": {
		"scope": "python",
		"prefix": "class",
		"body": "class CustomManager(GameComponentManager): \n\tdef prepare(self):\n\t\tpass\n\tdef connect(self):\n\t\tpass",
		"description": "A bone class for a component manager"
	},
	"Process events method": {
		"scope": "python",
		"prefix": "def process_events(",
		"body": "def process_events(self, event: pygame.event.Event): \n\t\"\"\"Listen the events for this manager.\"\"\"\n\tmatch event:\n\t\tcase pygame.event.EventType(type=...) :",
		"description": "A bone class for a component manager"
	},
	"case pysimgame Event": {
		"scope": "python",
		"prefix": "case pysimgame Event EventType",
		"body": "case EventType(type=pysimgame.events.$0):\n\t",
		"description": "Any pysimgame event"
	},
	"case Button Clicked": {
		"scope": "python",
		"prefix": "case Event EventType Button Clicked",
		"body": "\tcase pygame.event.EventType(type=pygame_gui.UI_BUTTON_PRESSED, ui_element=..., ui_object_id=...):\n\t\t...",
		"description": "Case event is a button clicked"
	},
}